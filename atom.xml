<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lytqwq</title>
  
  
  <link href="http://liyuting233.github.io/atom.xml" rel="self"/>
  
  <link href="http://liyuting233.github.io/"/>
  <updated>2020-08-17T08:42:53.090Z</updated>
  <id>http://liyuting233.github.io/</id>
  
  <author>
    <name>liyuting</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>P2604 [ZJOI2010]网络扩容</title>
    <link href="http://liyuting233.github.io/2020/08/17/P2604%20[ZJOI2010]%E7%BD%91%E7%BB%9C%E6%89%A9%E5%AE%B9/"/>
    <id>http://liyuting233.github.io/2020/08/17/P2604%20[ZJOI2010]%E7%BD%91%E7%BB%9C%E6%89%A9%E5%AE%B9/</id>
    <published>2020-08-17T08:16:29.000Z</published>
    <updated>2020-08-17T08:42:53.090Z</updated>
    
    <content type="html"><![CDATA[<p>没想到吧，我就是在开blog第一天写题解哈哈哈哈（其实是测试一下</p><p>虽然现在还没有<strong>LaTeX</strong>，就凑合看吧</p><p>题目链接：<a href="https://www.luogu.com.cn/problem/P4014">https://www.luogu.com.cn/problem/P4014</a></p><p>题意：一个图，求最大流，每个边超过最大流量后才收费用，再求比最大流多流k的最小费用</p><p>第一问肯定就直接建不带费用的边，然后套最大流板子</p><p>对于第二问，我们就再多建一遍带费用的边，最大流量为inf，然后在求费用流时魔改一下，限制再流k的情况：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(flow[t]&gt;k)&#123;</span><br><span class="line">  flow[t]=k;</span><br><span class="line">&#125;</span><br><span class="line">k-=flow[t];</span><br></pre></td></tr></table></figure><p>其实就是板子题了</p><p>AC情况：<a href="https://www.luogu.com.cn/record/37174702">https://www.luogu.com.cn/record/37174702</a></p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>,M=<span class="number">20010</span>,inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,s,t;</span><br><span class="line"><span class="keyword">int</span> u[M],v[M],w[M],f[M];</span><br><span class="line"><span class="keyword">int</span> cnt,Head[N],Next[M],V[M],F[M],W[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    V[cnt]=v;</span><br><span class="line">    F[cnt]=f;</span><br><span class="line">    W[cnt]=w;</span><br><span class="line">    Next[cnt]=Head[u];</span><br><span class="line">    Head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans,ans2;</span><br><span class="line"><span class="keyword">int</span> flow[N],dis[N],vis[N],pre[N],last[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(flow,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(flow));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(s);</span><br><span class="line">    vis[s]=<span class="number">1</span>;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    pre[t]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now=Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        vis[now]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[now];i!=<span class="number">-1</span>;i=Next[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(W[i]&gt;<span class="number">0</span>&amp;&amp;dis[V[i]]&gt;dis[now]+F[i])&#123;</span><br><span class="line">                dis[V[i]]=dis[now]+F[i];</span><br><span class="line">                pre[V[i]]=now;</span><br><span class="line">                last[V[i]]=i;</span><br><span class="line">                flow[V[i]]=min(flow[now],W[i]);</span><br><span class="line">                <span class="keyword">if</span>(!vis[V[i]])&#123;</span><br><span class="line">                    vis[V[i]]=<span class="number">1</span>;</span><br><span class="line">                    Q.push(V[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(spfa())&#123;</span><br><span class="line">        <span class="keyword">int</span> now=t;</span><br><span class="line">        ans+=flow[t];</span><br><span class="line">        ans2+=flow[t]*dis[t];</span><br><span class="line">        <span class="keyword">while</span>(now!=s)&#123;</span><br><span class="line">            W[last[now]]-=flow[t];</span><br><span class="line">            W[last[now]^<span class="number">1</span>]+=flow[t];</span><br><span class="line">            now=pre[now];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(spfa()&amp;&amp;k)&#123;</span><br><span class="line">        <span class="keyword">int</span> now=t;</span><br><span class="line">        <span class="keyword">if</span>(flow[t]&gt;k)&#123;</span><br><span class="line">            flow[t]=k;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=flow[t];</span><br><span class="line">        ans2+=flow[t]*dis[t];</span><br><span class="line">        k-=flow[t];</span><br><span class="line">        <span class="keyword">while</span>(now!=s)&#123;</span><br><span class="line">            W[last[now]]-=flow[t];</span><br><span class="line">            W[last[now]^<span class="number">1</span>]+=flow[t];</span><br><span class="line">            now=pre[now];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Head));</span><br><span class="line">    ans=ans2=<span class="number">0</span>;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        add(u[i],v[i],w[i],<span class="number">0</span>);</span><br><span class="line">        add(v[i],u[i],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s=<span class="number">1</span>,t=n;</span><br><span class="line">    Dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans=ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        add(u[i],v[i],inf,f[i]);</span><br><span class="line">        add(v[i],u[i],<span class="number">0</span>,-f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Dinic2();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;u[i],&amp;v[i],&amp;w[i],&amp;f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    init();</span><br><span class="line">    init2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没想到吧，我就是在开blog第一天写题解哈哈哈哈（其实是测试一下&lt;/p&gt;
&lt;p&gt;虽然现在还没有&lt;strong&gt;LaTeX&lt;/strong&gt;，就凑合看吧&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://www.luogu.com.cn/problem/P4014&quot;&gt;</summary>
      
    
    
    
    
    <category term="网络流" scheme="http://liyuting233.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://liyuting233.github.io/2020/08/17/About-Me/"/>
    <id>http://liyuting233.github.io/2020/08/17/About-Me/</id>
    <published>2020-08-17T02:52:29.000Z</published>
    <updated>2020-08-17T08:48:00.954Z</updated>
    
    <content type="html"><![CDATA[<p>SD弱校蒟蒻</p><p>NOIP2018pj卡线一等</p><p>CSP2019tg卡线二等</p><p><a href="https://www.luogu.com.cn/user/104319">洛谷</a></p><p><a href="https://codeforces.ml/profile/liyuting">CF</a> （目前勉强挂在CM）</p><p>正在龟速学习OI，求换友链qwq</p><p>QQ:1451501519（加QQ时留个洛谷ID</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SD弱校蒟蒻&lt;/p&gt;
&lt;p&gt;NOIP2018pj卡线一等&lt;/p&gt;
&lt;p&gt;CSP2019tg卡线二等&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/user/104319&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://co</summary>
      
    
    
    
    
    <category term="杂" scheme="http://liyuting233.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://liyuting233.github.io/2020/08/16/hello-world/"/>
    <id>http://liyuting233.github.io/2020/08/16/hello-world/</id>
    <published>2020-08-16T08:58:54.547Z</published>
    <updated>2020-08-16T08:58:54.547Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
